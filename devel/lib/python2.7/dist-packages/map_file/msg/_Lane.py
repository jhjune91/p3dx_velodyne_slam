# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from map_file/Lane.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Lane(genpy.Message):
  _md5sum = "14eee265f5c4b4e93a294e03e3451866"
  _type = "map_file/Lane"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 lnid
int32 did
int32 blid
int32 flid
int32 bnid
int32 fnid
int32 jct
int32 blid2
int32 blid3
int32 blid4
int32 flid2
int32 flid3
int32 flid4
int32 clossid
float64 span
int32 lcnt
int32 lno
"""
  __slots__ = ['lnid','did','blid','flid','bnid','fnid','jct','blid2','blid3','blid4','flid2','flid3','flid4','clossid','span','lcnt','lno']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','float64','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lnid,did,blid,flid,bnid,fnid,jct,blid2,blid3,blid4,flid2,flid3,flid4,clossid,span,lcnt,lno

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Lane, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.lnid is None:
        self.lnid = 0
      if self.did is None:
        self.did = 0
      if self.blid is None:
        self.blid = 0
      if self.flid is None:
        self.flid = 0
      if self.bnid is None:
        self.bnid = 0
      if self.fnid is None:
        self.fnid = 0
      if self.jct is None:
        self.jct = 0
      if self.blid2 is None:
        self.blid2 = 0
      if self.blid3 is None:
        self.blid3 = 0
      if self.blid4 is None:
        self.blid4 = 0
      if self.flid2 is None:
        self.flid2 = 0
      if self.flid3 is None:
        self.flid3 = 0
      if self.flid4 is None:
        self.flid4 = 0
      if self.clossid is None:
        self.clossid = 0
      if self.span is None:
        self.span = 0.
      if self.lcnt is None:
        self.lcnt = 0
      if self.lno is None:
        self.lno = 0
    else:
      self.lnid = 0
      self.did = 0
      self.blid = 0
      self.flid = 0
      self.bnid = 0
      self.fnid = 0
      self.jct = 0
      self.blid2 = 0
      self.blid3 = 0
      self.blid4 = 0
      self.flid2 = 0
      self.flid3 = 0
      self.flid4 = 0
      self.clossid = 0
      self.span = 0.
      self.lcnt = 0
      self.lno = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_14id2i.pack(_x.lnid, _x.did, _x.blid, _x.flid, _x.bnid, _x.fnid, _x.jct, _x.blid2, _x.blid3, _x.blid4, _x.flid2, _x.flid3, _x.flid4, _x.clossid, _x.span, _x.lcnt, _x.lno))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.lnid, _x.did, _x.blid, _x.flid, _x.bnid, _x.fnid, _x.jct, _x.blid2, _x.blid3, _x.blid4, _x.flid2, _x.flid3, _x.flid4, _x.clossid, _x.span, _x.lcnt, _x.lno,) = _struct_14id2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_14id2i.pack(_x.lnid, _x.did, _x.blid, _x.flid, _x.bnid, _x.fnid, _x.jct, _x.blid2, _x.blid3, _x.blid4, _x.flid2, _x.flid3, _x.flid4, _x.clossid, _x.span, _x.lcnt, _x.lno))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.lnid, _x.did, _x.blid, _x.flid, _x.bnid, _x.fnid, _x.jct, _x.blid2, _x.blid3, _x.blid4, _x.flid2, _x.flid3, _x.flid4, _x.clossid, _x.span, _x.lcnt, _x.lno,) = _struct_14id2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_14id2i = struct.Struct("<14id2i")
