// Generated by gencpp from file cv_tracker/image_rect_ranged.msg
// DO NOT EDIT!


#ifndef CV_TRACKER_MESSAGE_IMAGE_RECT_RANGED_H
#define CV_TRACKER_MESSAGE_IMAGE_RECT_RANGED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <cv_tracker/image_rect.h>

namespace cv_tracker
{
template <class ContainerAllocator>
struct image_rect_ranged_
{
  typedef image_rect_ranged_<ContainerAllocator> Type;

  image_rect_ranged_()
    : rect()
    , range(0.0)
    , min_height(0.0)
    , max_height(0.0)  {
    }
  image_rect_ranged_(const ContainerAllocator& _alloc)
    : rect(_alloc)
    , range(0.0)
    , min_height(0.0)
    , max_height(0.0)  {
  (void)_alloc;
    }



   typedef  ::cv_tracker::image_rect_<ContainerAllocator>  _rect_type;
  _rect_type rect;

   typedef float _range_type;
  _range_type range;

   typedef float _min_height_type;
  _min_height_type min_height;

   typedef float _max_height_type;
  _max_height_type max_height;




  typedef boost::shared_ptr< ::cv_tracker::image_rect_ranged_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cv_tracker::image_rect_ranged_<ContainerAllocator> const> ConstPtr;

}; // struct image_rect_ranged_

typedef ::cv_tracker::image_rect_ranged_<std::allocator<void> > image_rect_ranged;

typedef boost::shared_ptr< ::cv_tracker::image_rect_ranged > image_rect_rangedPtr;
typedef boost::shared_ptr< ::cv_tracker::image_rect_ranged const> image_rect_rangedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cv_tracker::image_rect_ranged_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cv_tracker::image_rect_ranged_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cv_tracker

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'cv_tracker': ['/home/hj/catkin_ws/src/computing/perception/detection/packages/cv_tracker/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cv_tracker::image_rect_ranged_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cv_tracker::image_rect_ranged_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cv_tracker::image_rect_ranged_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cv_tracker::image_rect_ranged_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cv_tracker::image_rect_ranged_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cv_tracker::image_rect_ranged_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cv_tracker::image_rect_ranged_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3781b4778925185f71f990932766044c";
  }

  static const char* value(const ::cv_tracker::image_rect_ranged_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3781b4778925185fULL;
  static const uint64_t static_value2 = 0x71f990932766044cULL;
};

template<class ContainerAllocator>
struct DataType< ::cv_tracker::image_rect_ranged_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cv_tracker/image_rect_ranged";
  }

  static const char* value(const ::cv_tracker::image_rect_ranged_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cv_tracker::image_rect_ranged_<ContainerAllocator> >
{
  static const char* value()
  {
    return "image_rect rect\n\
float32 range\n\
float32 min_height\n\
float32 max_height\n\
\n\
================================================================================\n\
MSG: cv_tracker/image_rect\n\
int32 x\n\
int32 y\n\
int32 height\n\
int32 width\n\
float32 score\n\
";
  }

  static const char* value(const ::cv_tracker::image_rect_ranged_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cv_tracker::image_rect_ranged_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rect);
      stream.next(m.range);
      stream.next(m.min_height);
      stream.next(m.max_height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct image_rect_ranged_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cv_tracker::image_rect_ranged_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cv_tracker::image_rect_ranged_<ContainerAllocator>& v)
  {
    s << indent << "rect: ";
    s << std::endl;
    Printer< ::cv_tracker::image_rect_<ContainerAllocator> >::stream(s, indent + "  ", v.rect);
    s << indent << "range: ";
    Printer<float>::stream(s, indent + "  ", v.range);
    s << indent << "min_height: ";
    Printer<float>::stream(s, indent + "  ", v.min_height);
    s << indent << "max_height: ";
    Printer<float>::stream(s, indent + "  ", v.max_height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CV_TRACKER_MESSAGE_IMAGE_RECT_RANGED_H
