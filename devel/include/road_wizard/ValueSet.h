// Generated by gencpp from file road_wizard/ValueSet.msg
// DO NOT EDIT!


#ifndef ROAD_WIZARD_MESSAGE_VALUESET_H
#define ROAD_WIZARD_MESSAGE_VALUESET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace road_wizard
{
template <class ContainerAllocator>
struct ValueSet_
{
  typedef ValueSet_<ContainerAllocator> Type;

  ValueSet_()
    : center(0)
    , range(0)  {
    }
  ValueSet_(const ContainerAllocator& _alloc)
    : center(0)
    , range(0)  {
  (void)_alloc;
    }



   typedef int32_t _center_type;
  _center_type center;

   typedef int32_t _range_type;
  _range_type range;




  typedef boost::shared_ptr< ::road_wizard::ValueSet_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::road_wizard::ValueSet_<ContainerAllocator> const> ConstPtr;

}; // struct ValueSet_

typedef ::road_wizard::ValueSet_<std::allocator<void> > ValueSet;

typedef boost::shared_ptr< ::road_wizard::ValueSet > ValueSetPtr;
typedef boost::shared_ptr< ::road_wizard::ValueSet const> ValueSetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::road_wizard::ValueSet_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::road_wizard::ValueSet_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace road_wizard

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'road_wizard': ['/home/hj/catkin_ws/src/computing/perception/detection/packages/road_wizard/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::road_wizard::ValueSet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::road_wizard::ValueSet_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::road_wizard::ValueSet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::road_wizard::ValueSet_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::road_wizard::ValueSet_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::road_wizard::ValueSet_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::road_wizard::ValueSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "281ab05df668dd70c6f78f89e9a412a0";
  }

  static const char* value(const ::road_wizard::ValueSet_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x281ab05df668dd70ULL;
  static const uint64_t static_value2 = 0xc6f78f89e9a412a0ULL;
};

template<class ContainerAllocator>
struct DataType< ::road_wizard::ValueSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "road_wizard/ValueSet";
  }

  static const char* value(const ::road_wizard::ValueSet_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::road_wizard::ValueSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 center\n\
int32 range\n\
";
  }

  static const char* value(const ::road_wizard::ValueSet_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::road_wizard::ValueSet_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.center);
      stream.next(m.range);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ValueSet_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::road_wizard::ValueSet_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::road_wizard::ValueSet_<ContainerAllocator>& v)
  {
    s << indent << "center: ";
    Printer<int32_t>::stream(s, indent + "  ", v.center);
    s << indent << "range: ";
    Printer<int32_t>::stream(s, indent + "  ", v.range);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROAD_WIZARD_MESSAGE_VALUESET_H
