// Generated by gencpp from file road_wizard/ExtractedPosition.msg
// DO NOT EDIT!


#ifndef ROAD_WIZARD_MESSAGE_EXTRACTEDPOSITION_H
#define ROAD_WIZARD_MESSAGE_EXTRACTEDPOSITION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace road_wizard
{
template <class ContainerAllocator>
struct ExtractedPosition_
{
  typedef ExtractedPosition_<ContainerAllocator> Type;

  ExtractedPosition_()
    : signalId(0)
    , u(0)
    , v(0)
    , radius(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , hang(0.0)
    , type(0)
    , linkId(0)
    , plId(0)  {
    }
  ExtractedPosition_(const ContainerAllocator& _alloc)
    : signalId(0)
    , u(0)
    , v(0)
    , radius(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , hang(0.0)
    , type(0)
    , linkId(0)
    , plId(0)  {
  (void)_alloc;
    }



   typedef int32_t _signalId_type;
  _signalId_type signalId;

   typedef int32_t _u_type;
  _u_type u;

   typedef int32_t _v_type;
  _v_type v;

   typedef int32_t _radius_type;
  _radius_type radius;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _hang_type;
  _hang_type hang;

   typedef int8_t _type_type;
  _type_type type;

   typedef int32_t _linkId_type;
  _linkId_type linkId;

   typedef int32_t _plId_type;
  _plId_type plId;




  typedef boost::shared_ptr< ::road_wizard::ExtractedPosition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::road_wizard::ExtractedPosition_<ContainerAllocator> const> ConstPtr;

}; // struct ExtractedPosition_

typedef ::road_wizard::ExtractedPosition_<std::allocator<void> > ExtractedPosition;

typedef boost::shared_ptr< ::road_wizard::ExtractedPosition > ExtractedPositionPtr;
typedef boost::shared_ptr< ::road_wizard::ExtractedPosition const> ExtractedPositionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::road_wizard::ExtractedPosition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::road_wizard::ExtractedPosition_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace road_wizard

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'road_wizard': ['/home/hj/catkin_ws/src/computing/perception/detection/packages/road_wizard/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::road_wizard::ExtractedPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::road_wizard::ExtractedPosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::road_wizard::ExtractedPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::road_wizard::ExtractedPosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::road_wizard::ExtractedPosition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::road_wizard::ExtractedPosition_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::road_wizard::ExtractedPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0e48067eb51a80d53e09341230ac756f";
  }

  static const char* value(const ::road_wizard::ExtractedPosition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0e48067eb51a80d5ULL;
  static const uint64_t static_value2 = 0x3e09341230ac756fULL;
};

template<class ContainerAllocator>
struct DataType< ::road_wizard::ExtractedPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "road_wizard/ExtractedPosition";
  }

  static const char* value(const ::road_wizard::ExtractedPosition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::road_wizard::ExtractedPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 signalId\n\
int32 u\n\
int32 v\n\
int32 radius\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 hang\n\
int8 type\n\
int32 linkId\n\
int32 plId\n\
";
  }

  static const char* value(const ::road_wizard::ExtractedPosition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::road_wizard::ExtractedPosition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.signalId);
      stream.next(m.u);
      stream.next(m.v);
      stream.next(m.radius);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.hang);
      stream.next(m.type);
      stream.next(m.linkId);
      stream.next(m.plId);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExtractedPosition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::road_wizard::ExtractedPosition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::road_wizard::ExtractedPosition_<ContainerAllocator>& v)
  {
    s << indent << "signalId: ";
    Printer<int32_t>::stream(s, indent + "  ", v.signalId);
    s << indent << "u: ";
    Printer<int32_t>::stream(s, indent + "  ", v.u);
    s << indent << "v: ";
    Printer<int32_t>::stream(s, indent + "  ", v.v);
    s << indent << "radius: ";
    Printer<int32_t>::stream(s, indent + "  ", v.radius);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "hang: ";
    Printer<double>::stream(s, indent + "  ", v.hang);
    s << indent << "type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.type);
    s << indent << "linkId: ";
    Printer<int32_t>::stream(s, indent + "  ", v.linkId);
    s << indent << "plId: ";
    Printer<int32_t>::stream(s, indent + "  ", v.plId);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROAD_WIZARD_MESSAGE_EXTRACTEDPOSITION_H
